#!/usr/bin/env python3
import csv
import simplekml
import argparse
from collections import defaultdict
from datetime import datetime

def csv_to_kml(input_csv, output_kml, tracks=False):
    """
    Reads 'input_csv' and writes 'output_kml'.
    If 'tracks' is False, creates individual Placemarks for each row.
    If 'tracks' is True, creates a separate linestring track for each drone_id.
    """
    # We'll store rows grouped by drone_id when creating tracks.
    # For placemarks, we can just iterate over the file once.
    kml = simplekml.Kml()

    if tracks:
        # Gather coordinates for each drone_id
        drone_coords = defaultdict(list)
        with open(input_csv, 'r') as f:
            reader = csv.DictReader(f)
            for row in reader:
                drone_id = row['drone_id']
                lat = float(row['lat'])
                lon = float(row['lon'])
                alt = float(row['alt'])
                # Build up a list of (lon, lat, alt) coords for that drone
                drone_coords[drone_id].append((lon, lat, alt))

        # For each drone, create a linestring
        for drone_id, coords in drone_coords.items():
            if not coords:
                continue

            linestring = kml.newlinestring(name=f"Track for {drone_id}")
            linestring.coords = coords
            linestring.altitudemode = simplekml.AltitudeMode.absolute
            linestring.extrude = 1  # So it extrudes down to the ground if viewed in Google Earth

    else:
        # Create a single Placemark for each row in CSV
        with open(input_csv, 'r') as f:
            reader = csv.DictReader(f)
            for row in reader:
                drone_id  = row['drone_id']
                lat       = float(row['lat'])
                lon       = float(row['lon'])
                alt       = float(row['alt'])
                timestamp = row.get('timestamp', '')
                desc = (f"Drone: {drone_id}\n"
                        f"Time: {timestamp}\n"
                        f"Alt: {alt}\n"
                        f"Lat/Lon: {lat}, {lon}")

                pnt = kml.newpoint(
                    name=f"{drone_id}",
                    coords=[(lon, lat, alt)]
                )
                pnt.description = desc
                pnt.altitudemode = simplekml.AltitudeMode.absolute

    kml.save(output_kml)
    print(f"KML saved to {output_kml}")


def main():
    parser = argparse.ArgumentParser(description="Generate KML from a drone CSV file.")
    parser.add_argument("--csv", default="drone_log.csv", help="Path to the CSV file generated by the ZMQ logger")
    parser.add_argument("--kml", default="drone_data.kml", help="Output KML file path")
    parser.add_argument("--tracks", action="store_true",
                        help="If set, create linestring tracks instead of individual placemarks.")
    args = parser.parse_args()

    csv_to_kml(args.csv, args.kml, tracks=args.tracks)

if __name__ == "__main__":
    main()
